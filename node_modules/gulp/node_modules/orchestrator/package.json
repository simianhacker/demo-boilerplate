{
  "name": "orchestrator",
  "description": "A module for sequencing and executing tasks and dependencies in maximum concurrency",
  "version": "0.0.6",
  "homepage": "https://github.com/robrich/orchestrator",
  "repository": {
    "type": "git",
    "url": "git://github.com/robrich/orchestrator.git"
  },
  "author": {
    "name": "Rob Richardson",
    "url": "http://robrich.org/"
  },
  "main": "./index.js",
  "keywords": [
    "async",
    "task",
    "parallel",
    "compose"
  ],
  "dependencies": {
    "sequencify": "~0.0.5",
    "events": "~0.5.0"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "should": "~2.0.1",
    "q": "~0.9.7"
  },
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/robrich/orchestrator/raw/master/LICENSE"
    }
  ],
  "readme": "![status](https://secure.travis-ci.org/robrich/orchestrator.png?branch=master)\r\n\r\nOrchestrator\r\n============\r\n\r\nA module for sequencing and executing tasks and dependencies in maximum concurrency\r\n\r\nUsage\r\n-----\r\n\r\n### 1. Get a reference:\r\n\r\n```javascript\r\nvar Orchestrator = require('orchestrator');\r\nvar orchestrator = new Orchestrator();\r\n```\r\n\r\n### 2. Load it up with stuff to do:\r\n\r\nA synchronous task:\r\n\r\n```javascript\r\norchestrator.add('thing1', function(){\r\n  // do stuff\r\n});\r\n```\r\n\r\nAn asynchronous task:\r\n\r\n```javascript\r\norchestrator.add('thing2', function(callback){\r\n  // do stuff\r\n  callback(err);\r\n});\r\n```\r\n\r\nAn asynchronous task using promises:\r\n\r\n```javascript\r\nvar Q = require('q');\r\n\r\norchestrator.add('thing3', function(){\r\n  var deferred = Q.defer();\r\n\r\n  // do async stuff\r\n  setTimeout(function () {\r\n    deferred.resolve();\r\n  }, 1);\r\n\r\n  return deferred.promise;\r\n});\r\n```\r\n\r\nA task that requires other tasks be done first:\r\n\r\n```javascript\r\norchestrator.add('thing4', ['thing1','thing2','thing3'], function(){\r\n  // do stuff\r\n});\r\n```\r\n\r\n### 3. Run the tasks:\r\n\r\nStart the tasks you want to run:\r\n\r\n```javascript\r\norchestrator.start('thing1','thing2','thing3', 'thing4');\r\n```\r\n\r\nor start all the tasks:\r\n\r\n```javascript\r\norchestrator.start();\r\n```\r\n\r\nor specify a callback for when all tasks are complete:\r\n\r\n```javascript\r\norchestrator.start('thing1', function (err) {\r\n  // all done\r\n});\r\n```\r\n\r\nFRAGILE: Orchestrator catches exceptions on sync runs to pass to your callback\r\nbut doesn't hook to process.uncaughtException so it can't pass those exceptions\r\nto your callback\r\n\r\n### 4. Optionally listen to it's internals\r\n\r\n```javascript\r\norchestrator.on('task_start', function (e) {\r\n  // e.mess is the log message\r\n  // e.task is the task name if the message applies to a task else `undefined`\r\n  // e.err is the error if event is 'err' else `undefined`\r\n});\r\n```\r\n\r\nEvents include:\r\n- start: from start() method, shows you the task sequence\r\n- stop: from stop() method, the queue finished successfully\r\n- err: from stop() method, the queue was aborted due to a task error\r\n- task_start: from _runTask() method, task was started\r\n- task_stop: from _runTask() method, task completed successfully\r\n- task_err: from _runTask() method, task errored\r\n\r\nNote: fires either *stop or *err but not both.\r\n\r\n*Listen to all events*\r\n\r\n```javascript\r\norchestrator.onAll(orchestrator, function (e) {\r\n  // e is the original event args\r\n  // e.src is event name\r\n});\r\n```\r\n\r\n### 5. Enjoy!\r\n\r\nLICENSE\r\n-------\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2013 [Richardson & Sons, LLC](http://richardsonandsons.com/)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/robrich/orchestrator/issues"
  },
  "_id": "orchestrator@0.0.6",
  "_from": "orchestrator@0.0.6"
}
