{
  "name": "gulp",
  "description": "The streaming build system",
  "version": "2.2.0",
  "homepage": "http://github.com/wearefractal/gulp",
  "repository": {
    "type": "git",
    "url": "git://github.com/wearefractal/gulp.git"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "main": "./index.js",
  "preferGlobal": true,
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "dependencies": {
    "event-stream": "3.0.16",
    "glob-stream": "0.1.0",
    "mkdirp": "0.3.5",
    "optimist": "0.6.0",
    "gulp-util": "1.0.0",
    "gaze": "0.4.2",
    "orchestrator": "0.0.6",
    "chalk": "0.3.0",
    "resolve": "0.5.1"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "rimraf": "*",
    "q": "*",
    "jshint": "*"
  },
  "scripts": {
    "test": "mocha && jshint"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/wearefractal/gulp/raw/master/LICENSE"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/wearefractal/gulp.png?branch=master)](https://travis-ci.org/wearefractal/gulp)\n\n## Information\n\n<table>\n<tr> \n<td>Package</td><td>gulp</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Simple stream-y build helper</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.8</td>\n</tr>\n</table>\n\nThis project is in it's early stages. If something is not working or you would like a new feature please use the issues page.\n\n## Plugin List\n\nYou can view a list of plugins by going to [this npm search](https://npmjs.org/search?q=gulpplugin).\n\n## Usage\n\n```javascript\nvar gulp = require('gulp');\nvar jade = require('gulp-jade');\nvar coffee = require('gulp-coffee');\nvar minify = require('gulp-minify');\n\n// compile, minify, and copy templates\ngulp.task('templates', function(){\n  gulp.src(\"./client/templates/*.jade\")\n    .pipe(jade())\n    .pipe(minify())\n    .pipe(gulp.dest(\"./public/templates\"));\n});\n\ngulp.task('scripts', function(){\n  \n  // compile, minify, and copy coffeescript\n  gulp.src(\"./client/js/*.coffee\", {ignore: [\"vendor\"]})\n    .pipe(coffee())\n    .pipe(minify())\n    .pipe(gulp.dest(\"./public/js\"));\n\n  // copy vendor files\n  gulp.src(\"./client/js/vendor/**\")\n    .pipe(minify())\n    .pipe(gulp.dest(\"./public/js/vendor\"));\n\n});\n\n// copy all static assets\ngulp.task('copy', function(){\n  gulp.src(\"./client/img/**\")\n    .pipe(gulp.dest(\"./public/img\"));\n\n  gulp.src(\"./client/css/**\")\n    .pipe(gulp.dest(\"./public/css\"));\n\n  gulp.src(\"./client/*.html\")\n    .pipe(gulp.dest(\"./public\"));\n\n  gulp.src(\"./client/*.ico\")\n    .pipe(gulp.dest(\"./public\"));\n\n});\n\n// default task gets called when you run the `gulp` command\ngulp.task('default', function(){\n  gulp.run('templates', 'scripts', 'copy');\n\n  // watch files and run scripts if they change\n  gulp.watch(\"./client/js/**\", function(event){\n    gulp.run('scripts');\n  });\n\n  gulp.watch(\"./client/templates/**\", function(event){\n    gulp.run('templates');\n  });\n\n});\n```\n\n### gulp.src(glob[, opt])\n\nTakes a glob and represents a file structure. Can be piped to plugins.\n\n```javascript\ngulp.src(\"./client/templates/*.jade\")\n    .pipe(jade())\n    .pipe(minify())\n    .pipe(gulp.dest(\"./public/minified_templates\"));\n```\n\n##### Options\n\n`buffer: false` will return file.content as a stream and not buffer files.\n\n`read: false` will return file.content as null and not read the file at all.\n\n### gulp.dest(path[, opt])\n\nCan be piped to and it will write files. Re-emits all data passed to it so you can pipe to multiple folders.\n\n```javascript\ngulp.src(\"./client/templates/*.jade\")\n    .pipe(jade())\n    .pipe(gulp.dest(\"./public/templates\"))\n    .pipe(minify())\n    .pipe(gulp.dest(\"./public/minified_templates\"));\n```\n\n### gulp.task(name[, deps], fn)\n\nTasks that you want to run from the command line should not have spaces in them.\n\nThe task system is [Orchestrator](https://github.com/robrich/orchestrator) so check there for more detailed information.\n\n```javascript\ngulp.task('somename', function(){\n  // do stuff\n});\n```\n\n##### Task that run other tasks\n\n```javascript\ngulp.task('default', function(){\n  gulp.run('somename');\n});\n```\n\n##### Task dependencies\n\n```javascript\ngulp.task('somename', ['array','of','task','names'], function(){\n  // do stuff\n});\n```\n\n##### Async tasks\n\n```javascript\ngulp.task('somename', function(cb){\n  // do stuff\n  cb(err);\n});\n```\n\n### gulp.run(tasks...[, cb])\n\nTriggers tasks to be executed. *Does not run in order*.\n\n```javascript\ngulp.run('scripts', 'copyfiles', 'builddocs');\n```\n\n```javascript\ngulp.run('scripts', 'copyfiles', 'builddocs', function (err) {\n  // All done or aborted due to err\n});\n```\n\nUse gulp.run to run tasks from other tasks. You will probably use this in your default task and to group small tasks into larger tasks.\n\n### gulp.watch(glob, cb)\n\nglob can be a standard glob or an array of globs. cb is called on each fs change with an object describing the change.\n\n```javascript\ngulp.watch(\"js/**/*.js\", function(event){\n  gulp.run('scripts', 'copyfiles');\n});\n```\n\n### gulp.env\n\ngulp.env is an optimist arguments object. Running `gulp test dostuff --production` will yield `{_:[\"test\",\"dostuff\"],production:true}`\n\n## gulp cli\n\nTasks can be executed by running `gulp <taskname> <othertask> <somethingelse>`. Just running `gulp` will execute the task you registered called `default`. If there is no `default` task gulp will error.\n\n\n## Writing a plugin\n\nThis is a simple plugin that adds a header to the beginning of each file. It takes one argument (a string). Let's call it `gulp-header`. I recommend event-stream as a utility for creating these plugins.\n\n#### Code\n\n```javascript\nvar es = require('event-stream');\n\nmodule.exports = function(header){\n  // check our options\n  if (!header) throw new Error(\"header option missing\");\n\n  // our map function\n  function modifyContents(file, cb){\n    // remember that contents is ALWAYS a buffer\n    file.contents = new Buffer(header + String(file.contents));\n    cb(null, file);\n  }\n\n  // return a stream\n  return es.map(modifyContents);\n}\n```\n\n#### Usage\n\n```javascript\nvar gulp = require('gulp');\nvar header = require('gulp-header');\n\n// Add a copyright header to each file\ngulp.src('./client/scripts/*.js')\n  .pipe(header('// This file is copyrighted'))\n  .pipe(gulp.dest(\"./public/scripts/\"))\n```\n\n## Plugin Guidelines\n\n1. file.contents should always go out the same way it came in\n2. Do not pass the file object downstream until you are done with it\n3. Make use of the gulp-util library. Do you need to change a file's extension or do some tedious path crap? Try looking there first and add it if it doesn't exist\n4. Use gulp.log when you need to log messages\n5. Remember: Your plugin should only do one thing! It should not have a complex config object that makes it do multiple things. It should not concat and add headers/footers. This is not grunt. Keep it simple.\n6. Add \"gulpplugin\" as a keyword in your package.json so you show up on our search\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Fractal <contact@wearefractal.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wearefractal/gulp/issues"
  },
  "_id": "gulp@2.2.0",
  "_from": "gulp@"
}
